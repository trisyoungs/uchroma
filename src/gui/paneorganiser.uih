/*
	*** Pane Organiser
	*** src/gui/paneorganiser.uih
	Copyright T. Youngs 2013-2014

	This file is part of uChroma.

	uChroma is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	uChroma is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with uChroma.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef UCHROMA_PANEORGANISER_H
#define UCHROMA_PANEORGANISER_H

#include <QtGui/QWidget>

// Forward declarations
class ViewLayout;
class ViewPane;

// Pane Organiser
class PaneOrganiser : public QWidget
{
	Q_OBJECT

	public:
	// Constructor
	PaneOrganiser(QWidget* parent);


	/*
	 * Layout
	 */
	private:
	// Layout to display / organise
	ViewLayout* viewLayout_;
	// Local layout 'pixel' dimensions
	int layoutPixelWidth_, layoutPixelHeight_;
	// Margin to use in display
	int paneMargin_;

	private:
	// Calculate pixel size based on current widget geometry
	void calculateLayoutPixelSize();
	// Return grid reference containing coordinates supplied
	QPoint gridReference(QPoint point);

	public:
	// Set layout to display / organise
	void setViewLayout(ViewLayout* layout);


	/*
	 * Interaction
	 */
	private:
	// Pane Handles
	enum PaneHandle { BottomLeftHandle, BottomMiddleHandle, BottomRightHandle, MiddleLeftHandle, MiddleRightHandle, TopLeftHandle, TopMiddleHandle, TopRightHandle, nHandles };
	// Pane currently under mouse
	ViewPane* paneUnderMouse_;
	// Pane we are currently dragging
	ViewPane* dragPane_;
	// Pane we are currently stretching
	ViewPane* stretchPane_;
	// Handle grabbed if stretching
	PaneHandle stretchHandle_;
	// Clicked grid reference
	QPoint clickedGridReference_;
	// Grid coordinate we are currently dragging over
	QPoint dragGridReference_;

	private:
	// Return handle under mouse (if any)
	PaneOrganiser::PaneHandle handleUnderMouse(ViewPane* pane, int mouseX, int mouseY);

	signals:
	void currentPaneChanged(int gridX, int gridY);


	/*
	 * Signals / Slots
	 */
	protected:
	void dragEnterEvent(QDragEnterEvent *event);
	void dragLeaveEvent(QDragLeaveEvent *event);
	void dragMoveEvent(QDragMoveEvent *event);
	void dropEvent(QDropEvent *event);
	void mousePressEvent(QMouseEvent *event);
	void mouseMoveEvent(QMouseEvent *event);
	void mouseReleaseEvent(QMouseEvent *event);
	void resizeEvent(QResizeEvent* event);
	void paintEvent(QPaintEvent *event);

	signals:
	// Main display update required
	void updateMainDisplay();
};

#endif

