/*
	*** OpenGL Viewer Widget (subclassing QGLWidget)
	*** src/gui/viewer.uih
	Copyright T. Youngs 2013

	This file is part of uChroma.

	uChroma is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	uChroma is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with uChroma.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef UCHROMA_VIEWER_H
#define UCHROMA_VIEWER_H

#include <QtOpenGL/QGLWidget>
#include <QtCore/QObject>
#include "render/primitive.h"
#include "base/axes.h"
#include "base/colourscale.h"
#include "base/data2d.h"
#include "templates/list.h"
#include "templates/reflist.h"

// Forward Declarations
class ColourScale;
class UChromaWindow;
class Collection;
class DisplayDataSet;
class ViewPane;

// Base rendering widget
class Viewer : public QGLWidget
{
	Q_OBJECT

	public:
	// Constructor / Destructor
	Viewer(QWidget *parent);
	~Viewer();


	/*
	 * Link to UChroma
	 */
	private:
	// UChromaWindow pointer
	UChromaWindow* uChroma_;
	
	public:
	// Set UChromaWindow pointer
	void setUChroma(UChromaWindow* ptr);


	/*
	 * Character / Setup
	 */
	private:
	// GLExtension pointer stack
	List<GLExtensions> extensionsStack_;
	// Width, height, and aspect ratio of the context
	GLsizei contextWidth_, contextHeight_;
	// Flag to indicate whether we may draw to the context
	bool valid_;
	// Flag indicating if we are currently drawing to this context
	bool drawing_;
	// Flag specifying whether we are currently rendering offscreen
	bool renderingOffScreen_; 
	// String containing time taken to do last render
	QString renderTime_;

	protected:
	// Initialise context widget (when created by Qt)
	void initializeGL();
	// General repaint callback
	void paintGL();
	// Resize function
	void resizeGL(int, int);

	private:
	// Setup basic GL properties
	void setupGL();

	public:
	// Return the current height of the drawing area
	GLsizei contextHeight() const;
	// Return the current width of the drawing area
	GLsizei contextWidth() const;
	// Probe widget/context/format features
	void probeFeatures();
	// Check for GL error
	void checkGlError();
	// Refresh widget / scene
	void postRedisplay();
	// Set whether we are currently rendering offscreen
	void setRenderingOffScreen(bool b); 
	// Grab current contents of framebuffer
	QPixmap frameBuffer();
	// Render or grab image
	QPixmap generateImage(int w, int h);


	/*
	 * Mouse / Keyboard Input
	 * (in viewer_input.cpp)
	 */
	private:
	// Canvas coordinates of mouse down
	Vec3<double> rMouseDown_;
	// Canvas coordinates of mouse cursor
	Vec3<double> rMouseLast_;
	// Current state of mouse buttons
	Qt::MouseButtons buttonState_;

	protected:
	// Qt Virtual (mouse press event)
	void mousePressEvent(QMouseEvent*);
	// Qt Virtual (mouse release event)
	void mouseReleaseEvent(QMouseEvent*);
	// Qt Virtual (mouse move event)
	void mouseMoveEvent(QMouseEvent*);
	// Qt Virtual (mouse wheel event)
	void wheelEvent(QWheelEvent*);
	// Qt Virtual (mouse double click event)
	void mouseDoubleClickEvent(QMouseEvent* event);

	public:
	// Return mouse coordinates at last mousedown event
	Vec3<double> rMouseDown();
	// Return mouse coordinates at last mousemove event
	Vec3<double> rMouseLast();

	public slots:
	// Qt Slot (key press event)
	void keyPressEvent(QKeyEvent*);
	// Qt Slot (key release event)
	void keyReleaseEvent(QKeyEvent*);


	/*
	 * Rendering Preferences
	 */ 
	private:
	// Flag specifying whether to correct transparency artefacts
	bool correctTransparency_;
	// Line width scaling factor to use (to adjust line width when saving images)
	double lineWidthScaling_;

	public:
	// Set whether to correct transparency artefacts
	void setCorrectTransparency(bool b);
	// Return whether to correct transparency artefacts
	bool correctTransparency();
	// Set line width and text scaling to use
	void setObjectScaling(double scaling);


	/*
	 * User Functions / Data
	 * (in viewer_user.cpp)
	 */
	signals:
	// View was clicked on
	void viewClicked();
	// Return string containing time taken to do last render
	QString renderComplete(QString timeTaken);
};

#endif
