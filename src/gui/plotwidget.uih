/*
	*** Data2D Plotting Widget
	*** src/plotwidget.uih
	Copyright T. Youngs 2012-2013.

	This file is part of JournalViewer.

	JournalViewer is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	JournalViewer is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with JournalViewer.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef JOURNALVIEWER_PLOTWIDGET_H
#define JOURNALVIEWER_PLOTWIDGET_H

#include <QtGui/QWidget>
#include <QtOpenGL/QGLWidget>
#include <QtCore/QObject>
#include <QtCore/QTimer>
#include <QtSvg/QSvgGenerator>
#include "base/data2d.h"
#include "templates/reflist.h"

// Forward Declarations
class QMenu;
class QPushButton;
class QLabel;
class PlotData;

// PlotDataBlock
class PlotDataBlock : public ListItem<PlotDataBlock>
{
	public:
	// Constructor
	PlotDataBlock(QString blockName);
	// Destructor
	~PlotDataBlock();

	
	/*
	 * Pen Styles
	 */
	public:
	// Available line styles
	enum BlockLineStyle { SolidStyle, DotStyle, DashedStyle, nBlockLineStyles };

	private:
	// Array of line (dash) definitions
	static QVector<qreal> lineStyles_[nBlockLineStyles];

	/*
	 * Data
	 */
	private:
	// Name of the block
	QString blockName_;
	// Line style
	PlotDataBlock::BlockLineStyle lineStyle_;
	// Whether block is visible
	bool visible_;

	public:
	// Return name of block
	QString blockName();
	// Set associated line style
	void setLineStyle(PlotDataBlock::BlockLineStyle style);
	// Return associated line dash pattern
	const QVector<qreal>& dashes();
	// Set visibility of block
	void setVisible(bool visible);
	// Return visibility of block
	bool visible();
};

// PlotData
class PlotData : public ListItem<PlotData>
{
	public:
	// Constructor
	PlotData();
	// Destructor
	~PlotData();


	/*
	 * Plot Data
	 */
	private:
	// Data to plot
	Data2D data_;
	// Block index (or -1 for no block)
	int blockIndex_;
	// QPainterPath of data
	QPainterPath linePath_;
	// Vertical offset to apply to data
	double verticalOffset_;
	// X range of data
	double xMin_, xMax_;
	// Y range of data
	double yMin_, yMax_;
	// Data name
	QString name_;
	// Associated PlotDataBlock
	PlotDataBlock* block_;
	// Scales used in last path generation
	double lastXScale_, lastYScale_;

	public:
	// Set data
	void setData(Data2D& source, QString runNumber);
	// Return reference to contained data
	Data2D& data();
	// Determine data limits
	void determineLimits();
	// Set block
	void setBlock(PlotDataBlock* block);
	// Return block
	PlotDataBlock* block();
	// Regenerate QPainterPath
	void generatePainterPaths(double xScale, double yScale);
	// Return line QPainterPath
	QPainterPath& linePath();
	// Return whether this data is visible
	bool visible();
	// Set vertical offset multiplier
	void setVerticalOffset(int offset);
	// Return vertical offset to apply to data
	double verticalOffset();
	// Return minimum x value for data
	double xMin();
	// Return maximum x value for data
	double xMax();
	// Return minimum y value for data
	double yMin();
	// Return maximum y value for data
	double yMax();
	// Return name
	QString name();


	/*
	 * Style Data
	 */
	private:
	// Line Colour
	QColor lineColour_;
	// Line Style
	Qt::PenStyle lineStyle_;
	
	public:
	// Set line colour
	void setLineColour(QColor color);
	// Return line colour
	QColor lineColour();
	// Set line style
	void setLineStyle(Qt::PenStyle style);
	// Return line style
	Qt::PenStyle lineStyle();
	// Set supplied pen colour and line style
	void stylePen(QPen& pen);
};

/*
 * PlotWidget
 */
class PlotWidget : public QWidget
{
	Q_OBJECT

	public:
	// Constructor
	PlotWidget(QWidget *parent);
	// Destructor
	~PlotWidget();


	/*
	 * Slots / Reimplementations
	 */
	private:
	// Context Menu
	QMenu* contextMenu_;
	// Coordinates label (if available)
	QLabel* coordinatesLabel_;

	protected:
	// General repaint callback
	void paintEvent(QPaintEvent* event);
	// Mouse press event)
	void mousePressEvent(QMouseEvent*);
	// Mouse release event)
	void mouseReleaseEvent(QMouseEvent*);
	// Mouse move event)
	void mouseMoveEvent(QMouseEvent*);
	// Mouse wheel event)
	void wheelEvent(QWheelEvent*);
	// Key press event
	void keyPressEvent(QKeyEvent* event);
	// Key release event
	void keyReleaseEvent(QKeyEvent* event);

	public slots:
	// Context Menu Show All clicked
	void contextMenuShowAllClicked(bool checked);
	// Context Menu CopyToClipboard clicked
	void contextMenuCopyToClipboardClicked(bool checked);

	public:
	// Set coordinates label
	void setCoordinatesLabel(QLabel* label);


	/*
	 * Drawing Functions
	 */
	private:
	// Available drawing width / height
	int areaWidth_, areaHeight_;
	// General height of text
	double textHeight_;
	// Rectangles for axis value labels
	QRectF xValueRect_, yValueRect_;
	// Transform matrices for global, local, and data space
	QTransform globalTransform_, localTransform_, dataTransform_;
	// Brushes
	QBrush backgroundBrush_;

	private:
	// Setup basic drawing area
	void plotSetup(QPainter& painter);
	// Draw gridlines
	void drawGridLines(QPainter& painter);
	// Draw data
	void drawData(QPainter& painter);
	// Draw axis tick marks / labels
	void drawAxes(QPainter& painter);
	// Draw axis titles
	void drawTitles(QPainter& painter);
	// Draw legend
	void drawLegend(QPainter& painter);
	// Render plot
	void renderPlot(QPainter& painter);

	public:
	// Draw plot on specified QPainter and at specified position
	void draw(QPainter& painter, QRect boundingRect);
	// Draw plot on specified image
	void draw(QImage& image);


	/*
	 * Style
	 */
	public:
	/// Pre-defined Line Colours
	enum LineColour
	{
		BlackColour,
		RedColour,
		BlueColour,
		GreenColour,
		PurpleColour,
		OrangeColour,
		MetallicBlueColour,
		MintColour,
		GreyColour,
		nLineColours
	};

	private:
	// Pre-defined colours
	static QColor lineColours_[PlotWidget::nLineColours];
	// Background plot colour
	QColor backgroundColour_;
	// Foreground pen colour
	QColor foregroundColour_;
	// Font for plot
	QFont font_;
	// Formatting strings for axis labels
	QString xLabelFormat_, yLabelFormat_;

	public:
	// Return nth (wrapped) pre-defined colour
	static QColor lineColour(int n);
	///@}


	/*!
	 * \name Plot Area
	 */
	///@{
	private:
	// Drawing area for actual data
	QRect graphArea_;
	// Last used drawing area for actual data
	QRect lastGraphArea_;
	// X range to display
	double xMin_, xMax_;
	// Y range to display
	double yMin_, yMax_;
	// Soft limits for X range
	double xMinLimit_, xMaxLimit_;
	// Soft limits for Y range
	double yMinLimit_, yMaxLimit_;
	// Whether soft limits are enabled
	bool limitXMin_, limitXMax_, limitYMin_, limitYMax_;
	// Scaling factors, converting from device to graph
	double xScale_, yScale_;
	// Last used saling factors
	double lastXScale_, lastYScale_;
	// General spacing within graph
	int spacing_;
	// Drawing area for X-axis labels, ticks and title
	QRect xAxisArea_;
	// Drawing area for Y-axis labels, ticks and title
	QRect yAxisArea_;
	// Tick start and delta for x-axis
	double xAxisTickStart_, xAxisTickDelta_;
	// Tick start and delta for y-axis
	double yAxisTickStart_, yAxisTickDelta_;
	// Main graph title
	QString mainTitle_;
	// X axis title
	QString xAxisTitle_;
	// Y axis title
	QString yAxisTitle_;
	// Whether to show legend
	bool showLegend_;
	// Spacing between dataSets (multiplied by verticalOffset())
	double verticalSpacing_;
	// Whether to autoscale data on refresh
	bool autoScale_;

	private:
	// Determine suitable tick deltas based on current graph limits
	void calculateTickDeltas(int maxTicks);

	public:
	// Set main title
	void setMainTitle(QString title);
	// Set x-axis title
	void setXAxisTitle(QString title);
	// Set y-axis title
	void setYAxisTitle(QString title);
	// Set x and y axis titles
	void setTitles(QString mainTitle, QString xTitle, QString yTitle);
	// Set soft X limits for plot area
	void setXLimits(bool setMinLimit, bool applyMinLimit, double minLimit, bool setMaxLimit, bool applyMaxLimit, double maxLimit);
	// Set soft Y limits for plot area
	void setYLimits(bool setMinLimit, bool applyMinLimit, double minLimit, bool setMaxLimit, bool applyMaxLimit, double maxLimit);
	// Set whether legend is visible
	void setShowLegend(bool on);
	// Return whether legend is visible
	bool showLegend();

	public slots:
	// Enable/disable autoscaling
	void setAutoScale(bool enabled);
	// Enable/disable soft x minimum limit
	void setXMinLimit(bool enabled);
	// Enable/disable soft x maxiimum limit
	void setXMaxLimit(bool enabled);
	// Enable/disable soft y minimum limit
	void setYMinLimit(bool enabled);
	// Enable/disable soft y maxiimum limit
	void setYMaxLimit(bool enabled);
	///@}


	/*
	 * Extra
	 */
	private:
	// Mouse button state at last mouseDown event
	Qt::MouseButtons buttons_;
	// Position of mouseDown event (in widget coordinates)
	QPoint clickedWidgetPosition_;
	// Position of mouseDown event (in data coordinates)
	QPointF clickedDataPosition_;
	// Current position of mouse (in data coordinates)
	QPointF currentDataPosition_;


	/*
	 * Source Data
	 */
	private:
	// Blockname list
	List<PlotDataBlock> dataSetBlocks_;
	// Number of visible dataSetBlocks_
	int nDataSetBlocksVisible_;
	// List of individual datasets
	List<PlotData> dataSets_;
	// Static data (always displayed)
	PlotData staticDataSet_;

	public:
	// Add data to Plot (local Data2D)
	PlotData* addDataSet(Data2D& data, QString name, QString blockName, int yOffset = 0);
	// Set static data
	void setStaticData(Data2D& data, QString name);
	// Remove all data from plot
	void removeAllDataSets();
	// Return dataset list
	const List<PlotData>& dataSets();
	// Determine dataset limits
	void determineDataSetLimits();
	// Return list of data blocks
	const List<PlotDataBlock>& dataSetBlocks();
	// Hide all datasets
	void hideAllDataSets();
	// Show all datasets containing the specified block data
	void setBlockVisible(QString blockName, bool visible);


	/*
	 * Functions
	 */
	public:
	// Convert widget coordinates to graph coordinates
	QPointF widgetToGraph(QPoint pos);
	// Zoom to specified graph coordinates
	void zoomToGraph(double x1, double y1, double x2, double y2);
	// Rescale axes to fit current data
	void fitData(bool obeySoftLimits);
};

#endif
